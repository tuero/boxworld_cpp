from enum import Enum
from typing import ClassVar

import numpy
from numpy.typing import NDArray

class BoxWorldElement(Enum):
    kColour0 = 0
    kColour1 = 1
    kColour2 = 2
    kColour3 = 3
    kColour4 = 4
    kColour5 = 5
    kColour6 = 6
    kColour7 = 7
    kColour8 = 8
    kColour9 = 9
    kColour10 = 10
    kColour11 = 11
    kAgent = 12
    kEmpty = 13
    kWall = 14

class BoxWorldGameState:
    name: ClassVar[str] = ...  # read-only
    num_actions: ClassVar[int] = ...  # read-only
    def __init__(self, board_str: str) -> None: ...
    def __copy__(self) -> BoxWorldGameState: ...
    def __deepcopy__(self, arg0: dict) -> BoxWorldGameState: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def apply_action(self, int: int) -> None: ...
    def is_solution(self) -> bool: ...
    def is_terminal(self) -> bool: ...
    def observation_shape(self) -> tuple[int, int, int]: ...
    def get_observation(self) -> NDArray[numpy.float32]: ...
    def image_shape(self) -> tuple[int, int, int]: ...
    def to_image(self) -> NDArray[numpy.uint8]: ...
    def get_reward_signal(self) -> int: ...
    def get_agent_index(self) -> int: ...
    def has_key(self) -> bool: ...
    def set_key(self, key: BoxWorldElement) -> None: ...
